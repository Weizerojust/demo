syntax="proto3";
package fast;
enum Cobol85Kind {
 startrule = 0;
 compilationunit = 1;
 programunit = 2;
 endprogramstatement = 3;
 identificationdivision = 4;
 identificationdivisionbody = 5;
 programidparagraph = 6;
 authorparagraph = 7;
 installationparagraph = 8;
 datewrittenparagraph = 9;
 datecompiledparagraph = 10;
 securityparagraph = 11;
 remarksparagraph = 12;
 environmentdivision = 13;
 environmentdivisionbody = 14;
 configurationsection = 15;
 configurationsectionparagraph = 16;
 sourcecomputerparagraph = 17;
 objectcomputerparagraph = 18;
 objectcomputerclause = 19;
 memorysizeclause = 20;
 disksizeclause = 21;
 collatingsequenceclause = 22;
 collatingsequenceclausealphanumeric = 23;
 collatingsequenceclausenational = 24;
 segmentlimitclause = 25;
 charactersetclause = 26;
 specialnamesparagraph = 27;
 specialnameclause = 28;
 alphabetclause = 29;
 alphabetclauseformat1 = 30;
 alphabetliterals = 31;
 alphabetthrough = 32;
 alphabetalso = 33;
 alphabetclauseformat2 = 34;
 channelclause = 35;
 classclause = 36;
 classclausethrough = 37;
 classclausefrom = 38;
 classclauseto = 39;
 currencysignclause = 40;
 decimalpointclause = 41;
 defaultcomputationalsignclause = 42;
 defaultdisplaysignclause = 43;
 environmentswitchnameclause = 44;
 environmentswitchnamespecialnamesstatusphrase = 45;
 odtclause = 46;
 reservenetworkclause = 47;
 symboliccharactersclause = 48;
 symboliccharacters = 49;
 inputoutputsection = 50;
 inputoutputsectionparagraph = 51;
 filecontrolparagraph = 52;
 filecontrolentry = 53;
 selectclause = 54;
 filecontrolclause = 55;
 assignclause = 56;
 reserveclause = 57;
 organizationclause = 58;
 paddingcharacterclause = 59;
 recorddelimiterclause = 60;
 accessmodeclause = 61;
 recordkeyclause = 62;
 alternaterecordkeyclause = 63;
 passwordclause = 64;
 filestatusclause = 65;
 relativekeyclause = 66;
 iocontrolparagraph = 67;
 iocontrolclause = 68;
 rerunclause = 69;
 reruneveryrecords = 70;
 reruneveryof = 71;
 reruneveryclock = 72;
 sameclause = 73;
 multiplefileclause = 74;
 multiplefileposition = 75;
 commitmentcontrolclause = 76;
 datadivision = 77;
 datadivisionsection = 78;
 filesection = 79;
 filedescriptionentry = 80;
 filedescriptionentryclause = 81;
 externalclause = 82;
 globalclause = 83;
 blockcontainsclause = 84;
 blockcontainsto = 85;
 recordcontainsclause = 86;
 recordcontainsclauseformat1 = 87;
 recordcontainsclauseformat2 = 88;
 recordcontainsclauseformat3 = 89;
 recordcontainsto = 90;
 labelrecordsclause = 91;
 valueofclause = 92;
 valuepair = 93;
 datarecordsclause = 94;
 linageclause = 95;
 linageat = 96;
 linagefootingat = 97;
 linagelinesattop = 98;
 linagelinesatbottom = 99;
 recordingmodeclause = 100;
 modestatement = 101;
 codesetclause = 102;
 reportclause = 103;
 databasesection = 104;
 databasesectionentry = 105;
 workingstoragesection = 106;
 linkagesection = 107;
 communicationsection = 108;
 communicationdescriptionentry = 109;
 communicationdescriptionentryformat1 = 110;
 communicationdescriptionentryformat2 = 111;
 communicationdescriptionentryformat3 = 112;
 destinationcountclause = 113;
 destinationtableclause = 114;
 endkeyclause = 115;
 errorkeyclause = 116;
 messagecountclause = 117;
 messagedateclause = 118;
 messagetimeclause = 119;
 statuskeyclause = 120;
 symbolicdestinationclause = 121;
 symbolicqueueclause = 122;
 symbolicsourceclause = 123;
 symbolicterminalclause = 124;
 symbolicsubqueueclause = 125;
 textlengthclause = 126;
 localstoragesection = 127;
 screensection = 128;
 screendescriptionentry = 129;
 screendescriptionblankclause = 130;
 screendescriptionbellclause = 131;
 screendescriptionblinkclause = 132;
 screendescriptioneraseclause = 133;
 screendescriptionlightclause = 134;
 screendescriptiongridclause = 135;
 screendescriptionreversevideoclause = 136;
 screendescriptionunderlineclause = 137;
 screendescriptionsizeclause = 138;
 screendescriptionlineclause = 139;
 screendescriptioncolumnclause = 140;
 screendescriptionforegroundcolorclause = 141;
 screendescriptionbackgroundcolorclause = 142;
 screendescriptioncontrolclause = 143;
 screendescriptionvalueclause = 144;
 screendescriptionpictureclause = 145;
 screendescriptionfromclause = 146;
 screendescriptiontoclause = 147;
 screendescriptionusingclause = 148;
 screendescriptionusageclause = 149;
 screendescriptionblankwhenzeroclause = 150;
 screendescriptionjustifiedclause = 151;
 screendescriptionsignclause = 152;
 screendescriptionautoclause = 153;
 screendescriptionsecureclause = 154;
 screendescriptionrequiredclause = 155;
 screendescriptionpromptclause = 156;
 screendescriptionpromptoccursclause = 157;
 screendescriptionfullclause = 158;
 screendescriptionzerofillclause = 159;
 reportsection = 160;
 reportdescription = 161;
 reportdescriptionentry = 162;
 reportdescriptionglobalclause = 163;
 reportdescriptionpagelimitclause = 164;
 reportdescriptionheadingclause = 165;
 reportdescriptionfirstdetailclause = 166;
 reportdescriptionlastdetailclause = 167;
 reportdescriptionfootingclause = 168;
 reportgroupdescriptionentry = 169;
 reportgroupdescriptionentryformat1 = 170;
 reportgroupdescriptionentryformat2 = 171;
 reportgroupdescriptionentryformat3 = 172;
 reportgroupblankwhenzeroclause = 173;
 reportgroupcolumnnumberclause = 174;
 reportgroupindicateclause = 175;
 reportgroupjustifiedclause = 176;
 reportgrouplinenumberclause = 177;
 reportgrouplinenumbernextpage = 178;
 reportgrouplinenumberplus = 179;
 reportgroupnextgroupclause = 180;
 reportgroupnextgroupplus = 181;
 reportgroupnextgroupnextpage = 182;
 reportgrouppictureclause = 183;
 reportgroupresetclause = 184;
 reportgroupsignclause = 185;
 reportgroupsourceclause = 186;
 reportgroupsumclause = 187;
 reportgrouptypeclause = 188;
 reportgrouptypereportheading = 189;
 reportgrouptypepageheading = 190;
 reportgrouptypecontrolheading = 191;
 reportgrouptypedetail = 192;
 reportgrouptypecontrolfooting = 193;
 reportgroupusageclause = 194;
 reportgrouptypepagefooting = 195;
 reportgrouptypereportfooting = 196;
 reportgroupvalueclause = 197;
 programlibrarysection = 198;
 librarydescriptionentry = 199;
 librarydescriptionentryformat1 = 200;
 librarydescriptionentryformat2 = 201;
 libraryattributeclauseformat1 = 202;
 libraryattributeclauseformat2 = 203;
 libraryattributefunction = 204;
 libraryattributeparameter = 205;
 libraryattributetitle = 206;
 libraryentryprocedureclauseformat1 = 207;
 libraryentryprocedureclauseformat2 = 208;
 libraryentryprocedureforclause = 209;
 libraryentryproceduregivingclause = 210;
 libraryentryprocedureusingclause = 211;
 libraryentryprocedureusingname = 212;
 libraryentryprocedurewithclause = 213;
 libraryentryprocedurewithname = 214;
 libraryiscommonclause = 215;
 libraryisglobalclause = 216;
 datadescriptionentry = 217;
 datadescriptionentryformat1 = 218;
 datadescriptionentryformat2 = 219;
 datadescriptionentryformat3 = 220;
 datadescriptionentryexecsql = 221;
 dataalignedclause = 222;
 datablankwhenzeroclause = 223;
 datacommonownlocalclause = 224;
 dataexternalclause = 225;
 dataglobalclause = 226;
 dataintegerstringclause = 227;
 datajustifiedclause = 228;
 dataoccursclause = 229;
 dataoccursto = 230;
 dataoccurssort = 231;
 datapictureclause = 232;
 picturestring = 233;
 picturechars = 234;
 picturecardinality = 235;
 datareceivedbyclause = 236;
 datarecordareaclause = 237;
 dataredefinesclause = 238;
 datarenamesclause = 239;
 datasignclause = 240;
 datasynchronizedclause = 241;
 datathreadlocalclause = 242;
 datatypeclause = 243;
 datatypedefclause = 244;
 datausageclause = 245;
 datausingclause = 246;
 datavalueclause = 247;
 datavalueinterval = 248;
 datavalueintervalfrom = 249;
 datavalueintervalto = 250;
 datawithlowerboundsclause = 251;
 proceduredivision = 252;
 proceduredivisionusingclause = 253;
 proceduredivisiongivingclause = 254;
 proceduredivisionusingparameter = 255;
 proceduredivisionbyreferencephrase = 256;
 proceduredivisionbyreference = 257;
 proceduredivisionbyvaluephrase = 258;
 proceduredivisionbyvalue = 259;
 proceduredeclaratives = 260;
 proceduredeclarative = 261;
 proceduresectionheader = 262;
 proceduredivisionbody = 263;
 proceduresection = 264;
 paragraphs = 265;
 paragraph = 266;
 sentence = 267;
 statement = 268;
 acceptstatement = 269;
 acceptfromdatestatement = 270;
 acceptfrommnemonicstatement = 271;
 acceptfromescapekeystatement = 272;
 acceptmessagecountstatement = 273;
 addstatement = 274;
 addtostatement = 275;
 addtogivingstatement = 276;
 addcorrespondingstatement = 277;
 addfrom = 278;
 addto = 279;
 addtogiving = 280;
 addgiving = 281;
 alteredgoto = 282;
 alterstatement = 283;
 alterproceedto = 284;
 callstatement = 285;
 callusingphrase = 286;
 callusingparameter = 287;
 callbyreferencephrase = 288;
 callbyreference = 289;
 callbyvaluephrase = 290;
 callbyvalue = 291;
 callbycontentphrase = 292;
 callbycontent = 293;
 callgivingphrase = 294;
 cancelstatement = 295;
 cancelcall = 296;
 closestatement = 297;
 closefile = 298;
 closereelunitstatement = 299;
 closerelativestatement = 300;
 closeportfileiostatement = 301;
 closeportfileiousing = 302;
 closeportfileiousingclosedisposition = 303;
 closeportfileiousingassociateddata = 304;
 closeportfileiousingassociateddatalength = 305;
 computestatement = 306;
 computestore = 307;
 continuestatement = 308;
 deletestatement = 309;
 disablestatement = 310;
 displaystatement = 311;
 displayoperand = 312;
 displayat = 313;
 displayupon = 314;
 displaywith = 315;
 dividestatement = 316;
 divideintostatement = 317;
 divideintogivingstatement = 318;
 dividebygivingstatement = 319;
 dividegivingphrase = 320;
 divideinto = 321;
 dividegiving = 322;
 divideremainder = 323;
 enablestatement = 324;
 entrystatement = 325;
 evaluatestatement = 326;
 evaluateselect = 327;
 evaluatealsoselect = 328;
 evaluatewhenphrase = 329;
 evaluatewhen = 330;
 evaluatecondition = 331;
 evaluatethrough = 332;
 evaluatealsocondition = 333;
 evaluatewhenother = 334;
 evaluatevalue = 335;
 execcicsstatement = 336;
 execsqlstatement = 337;
 execsqlimsstatement = 338;
 exhibitstatement = 339;
 exhibitoperand = 340;
 exitstatement = 341;
 generatestatement = 342;
 gobackstatement = 343;
 gotostatement = 344;
 gotostatementsimple = 345;
 gotodependingonstatement = 346;
 ifstatement = 347;
 ifthen = 348;
 ifelse = 349;
 initializestatement = 350;
 initializereplacingphrase = 351;
 initializereplacingby = 352;
 initiatestatement = 353;
 inspectstatement = 354;
 inspecttallyingphrase = 355;
 inspectreplacingphrase = 356;
 inspecttallyingreplacingphrase = 357;
 inspectconvertingphrase = 358;
 inspectfor = 359;
 inspectcharacters = 360;
 inspectreplacingcharacters = 361;
 inspectallleadings = 362;
 inspectreplacingallleadings = 363;
 inspectallleading = 364;
 inspectreplacingallleading = 365;
 inspectby = 366;
 inspectto = 367;
 inspectbeforeafter = 368;
 mergestatement = 369;
 mergeonkeyclause = 370;
 mergecollatingsequencephrase = 371;
 mergecollatingalphanumeric = 372;
 mergecollatingnational = 373;
 mergeusing = 374;
 mergeoutputprocedurephrase = 375;
 mergeoutputthrough = 376;
 mergegivingphrase = 377;
 mergegiving = 378;
 movestatement = 379;
 movetostatement = 380;
 movetosendingarea = 381;
 movecorrespondingtostatement = 382;
 movecorrespondingtosendingarea = 383;
 multiplystatement = 384;
 multiplyregular = 385;
 multiplyregularoperand = 386;
 multiplygiving = 387;
 multiplygivingoperand = 388;
 multiplygivingresult = 389;
 openstatement = 390;
 openinputstatement = 391;
 openinput = 392;
 openoutputstatement = 393;
 openoutput = 394;
 openiostatement = 395;
 openextendstatement = 396;
 performstatement = 397;
 performinlinestatement = 398;
 performprocedurestatement = 399;
 performtype = 400;
 performtimes = 401;
 performuntil = 402;
 performvarying = 403;
 performvaryingclause = 404;
 performvaryingphrase = 405;
 performafter = 406;
 performfrom = 407;
 performby = 408;
 performtestclause = 409;
 purgestatement = 410;
 readstatement = 411;
 readinto = 412;
 readwith = 413;
 readkey = 414;
 receivestatement = 415;
 receivefromstatement = 416;
 receivefrom = 417;
 receiveintostatement = 418;
 receivenodata = 419;
 receivewithdata = 420;
 receivebefore = 421;
 receivewith = 422;
 receivethread = 423;
 receivesize = 424;
 receivestatus = 425;
 releasestatement = 426;
 returnstatement = 427;
 returninto = 428;
 rewritestatement = 429;
 rewritefrom = 430;
 searchstatement = 431;
 searchvarying = 432;
 searchwhen = 433;
 sendstatement = 434;
 sendstatementsync = 435;
 sendstatementasync = 436;
 sendfromphrase = 437;
 sendwithphrase = 438;
 sendreplacingphrase = 439;
 sendadvancingphrase = 440;
 sendadvancingpage = 441;
 sendadvancinglines = 442;
 sendadvancingmnemonic = 443;
 setstatement = 444;
 settostatement = 445;
 setupdownbystatement = 446;
 setto = 447;
 settovalue = 448;
 setbyvalue = 449;
 sortstatement = 450;
 sortonkeyclause = 451;
 sortduplicatesphrase = 452;
 sortcollatingsequencephrase = 453;
 sortcollatingalphanumeric = 454;
 sortcollatingnational = 455;
 sortinputprocedurephrase = 456;
 sortinputthrough = 457;
 sortusing = 458;
 sortoutputprocedurephrase = 459;
 sortoutputthrough = 460;
 sortgivingphrase = 461;
 sortgiving = 462;
 startstatement = 463;
 startkey = 464;
 stopstatement = 465;
 stringstatement = 466;
 stringsendingphrase = 467;
 stringsending = 468;
 stringdelimitedbyphrase = 469;
 stringforphrase = 470;
 stringintophrase = 471;
 stringwithpointerphrase = 472;
 subtractstatement = 473;
 subtractfromstatement = 474;
 subtractfromgivingstatement = 475;
 subtractcorrespondingstatement = 476;
 subtractsubtrahend = 477;
 subtractminuend = 478;
 subtractminuendgiving = 479;
 subtractgiving = 480;
 subtractminuendcorresponding = 481;
 terminatestatement = 482;
 unstringstatement = 483;
 unstringsendingphrase = 484;
 unstringdelimitedbyphrase = 485;
 unstringorallphrase = 486;
 unstringintophrase = 487;
 unstringinto = 488;
 unstringdelimiterin = 489;
 unstringcountin = 490;
 unstringwithpointerphrase = 491;
 unstringtallyingphrase = 492;
 usestatement = 493;
 useafterclause = 494;
 useafteron = 495;
 usedebugclause = 496;
 usedebugon = 497;
 writestatement = 498;
 writefromphrase = 499;
 writeadvancingphrase = 500;
 writeadvancingpage = 501;
 writeadvancinglines = 502;
 writeadvancingmnemonic = 503;
 writeatendofpagephrase = 504;
 writenotatendofpagephrase = 505;
 atendphrase = 506;
 notatendphrase = 507;
 invalidkeyphrase = 508;
 notinvalidkeyphrase = 509;
 onoverflowphrase = 510;
 notonoverflowphrase = 511;
 onsizeerrorphrase = 512;
 notonsizeerrorphrase = 513;
 onexceptionclause = 514;
 notonexceptionclause = 515;
 arithmeticexpression = 516;
 plusminus = 517;
 multdivs = 518;
 multdiv = 519;
 powers = 520;
 power = 521;
 basis = 522;
 condition = 523;
 andorcondition = 524;
 combinablecondition = 525;
 simplecondition = 526;
 classcondition = 527;
 conditionnamereference = 528;
 conditionnamesubscriptreference = 529;
 relationcondition = 530;
 relationsigncondition = 531;
 relationarithmeticcomparison = 532;
 relationcombinedcomparison = 533;
 relationcombinedcondition = 534;
 relationaloperator = 535;
 abbreviation = 536;
 identifier = 537;
 tablecall = 538;
 functioncall = 539;
 referencemodifier = 540;
 characterposition = 541;
 length = 542;
 subscript = 543;
 argument = 544;
 qualifieddataname = 545;
 qualifieddatanameformat1 = 546;
 qualifieddatanameformat2 = 547;
 qualifieddatanameformat3 = 548;
 qualifieddatanameformat4 = 549;
 qualifiedindata = 550;
 indata = 551;
 infile = 552;
 inmnemonic = 553;
 insection = 554;
 inlibrary = 555;
 intable = 556;
 alphabetname = 557;
 assignmentname = 558;
 basisname = 559;
 cdname = 560;
 classname = 561;
 computername = 562;
 conditionname = 563;
 dataname = 564;
 datadescname = 565;
 environmentname = 566;
 filename = 567;
 functionname = 568;
 indexname = 569;
 languagename = 570;
 libraryname = 571;
 localname = 572;
 mnemonicname = 573;
 paragraphname = 574;
 procedurename = 575;
 programname = 576;
 recordname = 577;
 reportname = 578;
 routinename = 579;
 screenname = 580;
 sectionname = 581;
 systemname = 582;
 symboliccharacter = 583;
 textname = 584;
 cobolword = 585;
 literal = 586;
 booleanliteral = 587;
 numericliteral = 588;
 integerliteral = 589;
 cicsdfhrespliteral = 590;
 cicsdfhvalueliteral = 591;
 figurativeconstant = 592;
 specialregister = 593;
 commententry = 594;
}
enum Python3Kind {
 single_input = 0;
 file_input = 1;
 eval_input = 2;
 decorator = 3;
 decorators = 4;
 decorated = 5;
 async_funcdef = 6;
 funcdef = 7;
 parameters = 8;
 typedargslist = 9;
 tfpdef = 10;
 varargslist = 11;
 vfpdef = 12;
 stmt = 13;
 simple_stmt = 14;
 small_stmt = 15;
 expr_stmt = 16;
 annassign = 17;
 testlist_star_expr = 18;
 augassign = 19;
 del_stmt = 20;
 pass_stmt = 21;
 flow_stmt = 22;
 break_stmt = 23;
 continue_stmt = 24;
 return_stmt = 25;
 yield_stmt = 26;
 raise_stmt = 27;
 import_stmt = 28;
 import_name = 29;
 import_from = 30;
 import_as_name = 31;
 dotted_as_name = 32;
 import_as_names = 33;
 dotted_as_names = 34;
 dotted_name = 35;
 global_stmt = 36;
 nonlocal_stmt = 37;
 assert_stmt = 38;
 compound_stmt = 39;
 async_stmt = 40;
 if_stmt = 41;
 while_stmt = 42;
 for_stmt = 43;
 try_stmt = 44;
 with_stmt = 45;
 with_item = 46;
 except_clause = 47;
 suite = 48;
 test = 49;
 test_nocond = 50;
 lambdef = 51;
 lambdef_nocond = 52;
 or_test = 53;
 and_test = 54;
 not_test = 55;
 comparison = 56;
 comp_op = 57;
 star_expr = 58;
 expr = 59;
 xor_expr = 60;
 and_expr = 61;
 shift_expr = 62;
 arith_expr = 63;
 term = 64;
 factor = 65;
 python_power = 66;
 atom_expr = 67;
 atom = 68;
 testlist_comp = 69;
 trailer = 70;
 subscriptlist = 71;
 python_subscript = 72;
 sliceop = 73;
 exprlist = 74;
 testlist = 75;
 dictorsetmaker = 76;
 classdef = 77;
 arglist = 78;
 python_argument = 79;
 comp_iter = 80;
 comp_for = 81;
 comp_if = 82;
 encoding_decl = 83;
 yield_expr = 84;
 yield_arg = 85;
}
enum SmaliKind {
 smali_file = 0;
 class_spec = 1;
 super_spec = 2;
 implements_spec = 3;
 source_spec = 4;
 access_list = 5;
 field = 6;
 method = 7;
 statements_and_directives = 8;
 ordered_method_item = 9;
 registers_directive = 10;
 param_list_or_id = 11;
 simple_name = 12;
 member_name = 13;
 method_prototype = 14;
 param_list_or_id_primitive_type = 15;
 param_list = 16;
 array_descriptor = 17;
 type_descriptor = 18;
 nonvoid_type_descriptor = 19;
 reference_type_descriptor = 20;
 integer_literal = 21;
 float_literal = 22;
 double_literal = 23;
 smali_literal = 24;
 parsed_integer_literal = 25;
 integral_literal = 26;
 fixed_32bit_literal = 27;
 fixed_literal = 28;
 array_literal = 29;
 annotation_element = 30;
 annotation = 31;
 subannotation = 32;
 enum_literal = 33;
 type_field_method_literal = 34;
 method_reference = 35;
 field_reference = 36;
 label = 37;
 label_ref = 38;
 register_list = 39;
 register_range = 40;
 verification_error_reference = 41;
 catch_directive = 42;
 catchall_directive = 43;
 parameter_directive = 44;
 debug_directive = 45;
 line_directive = 46;
 local_directive = 47;
 end_local_directive = 48;
 restart_local_directive = 49;
 prologue_directive = 50;
 epilogue_directive = 51;
 source_directive = 52;
 instruction_format12x = 53;
 instruction_format22s = 54;
 instruction_format31i = 55;
 instruction = 56;
 insn_format10t = 57;
 insn_format10x = 58;
 insn_format10x_odex = 59;
 insn_format11n = 60;
 insn_format11x = 61;
 insn_format12x = 62;
 insn_format20bc = 63;
 insn_format20t = 64;
 insn_format21c_field = 65;
 insn_format21c_field_odex = 66;
 insn_format21c_string = 67;
 insn_format21c_type = 68;
 insn_format21ih = 69;
 insn_format21lh = 70;
 insn_format21s = 71;
 insn_format21t = 72;
 insn_format22b = 73;
 insn_format22c_field = 74;
 insn_format22c_field_odex = 75;
 insn_format22c_type = 76;
 insn_format22cs_field = 77;
 insn_format22s = 78;
 insn_format22t = 79;
 insn_format22x = 80;
 insn_format23x = 81;
 insn_format30t = 82;
 insn_format31c = 83;
 insn_format31i = 84;
 insn_format31t = 85;
 insn_format32x = 86;
 insn_format35c_method = 87;
 insn_format35c_type = 88;
 insn_format35c_method_odex = 89;
 insn_format35mi_method = 90;
 insn_format35ms_method = 91;
 insn_format3rc_method = 92;
 insn_format3rc_method_odex = 93;
 insn_format3rc_type = 94;
 insn_format3rmi_method = 95;
 insn_format3rms_method = 96;
 insn_format45cc_method = 97;
 insn_format4rcc_method = 98;
 insn_format51l = 99;
 insn_array_data_directive = 100;
 insn_packed_switch_directive = 101;
 insn_sparse_switch_directive = 102;
}
enum SolidityKind {
 sourceunit = 0;
 pragmadirective = 1;
 pragmaname = 2;
 pragmavalue = 3;
 version = 4;
 versionoperator = 5;
 versionconstraint = 6;
 importdeclaration = 7;
 importdirective = 8;
 contractdefinition = 9;
 inheritancespecifier = 10;
 contractpart = 11;
 statevariabledeclaration = 12;
 usingfordeclaration = 13;
 structdefinition = 14;
 modifierdefinition = 15;
 modifierinvocation = 16;
 functiondefinition = 17;
 returnparameters = 18;
 modifierlist = 19;
 eventdefinition = 20;
 enumvalue = 21;
 enumdefinition = 22;
 indexedparameterlist = 23;
 indexedparameter = 24;
 parameterlist = 25;
 parameter = 26;
 typenamelist = 27;
 unnamedparameter = 28;
 variabledeclaration = 29;
 typename = 30;
 userdefinedtypename = 31;
 mapping = 32;
 functiontypename = 33;
 storagelocation = 34;
 statemutability = 35;
 block = 36;
 solidity_statement = 37;
 expressionstatement = 38;
 solidity_ifstatement = 39;
 whilestatement = 40;
 simplestatement = 41;
 forstatement = 42;
 inlineassemblystatement = 43;
 dowhilestatement = 44;
 solidity_continuestatement = 45;
 breakstatement = 46;
 solidity_returnstatement = 47;
 throwstatement = 48;
 variabledeclarationstatement = 49;
 identifierlist = 50;
 elementarytypename = 51;
 expression = 52;
 primaryexpression = 53;
 expressionlist = 54;
 namevaluelist = 55;
 namevalue = 56;
 functioncallarguments = 57;
 assemblyblock = 58;
 assemblyitem = 59;
 assemblyexpression = 60;
 assemblycall = 61;
 assemblylocaldefinition = 62;
 assemblyassignment = 63;
 assemblyidentifierorlist = 64;
 assemblyidentifierlist = 65;
 assemblyrightassignment = 66;
 labeldefinition = 67;
 assemblyswitch = 68;
 assemblycase = 69;
 assemblyfunctiondefinition = 70;
 assemblyfor = 71;
 assemblyliteral = 72;
 subassembly = 73;
 datasize = 74;
 linkersymbol = 75;
 tupleexpression = 76;
 elementarytypenameexpression = 77;
 numberliteral = 78;
 solidity_identifier = 79;
}
enum SrcmlKind {
UNIT_KIND = 0;
DECL = 1;
DECL_STMT = 2;
INIT = 3;
EXPR = 4;
EXPR_STMT = 5;
COMMENT = 6;
CALL = 7;
CONTROL = 8;
INCR = 9;
    NONE = 10;
 VARIABLE = 11;
 FUNCTION = 12;
 FUNCTION_DECL = 13;
 CONSTRUCTOR = 14;
 CONSTRUCTOR_DECL = 15;
 DESTRUCTOR = 16;
 DESTRUCTOR_DECL = 17;
    MACRO = 18;
    SINGLE_MACRO = 19;
 NULLOPERATOR = 20;
 ENUM_DEFN = 21;
 ENUM_DECL = 22;
 GLOBAL_ATTRIBUTE = 23;
 PROPERTY_ACCESSOR = 24;
 PROPERTY_ACCESSOR_DECL = 25;
    EXPRESSION = 26;
 CLASS_DEFN = 27;
 CLASS_DECL = 28;
 UNION_DEFN = 29;
 UNION_DECL = 30;
 STRUCT_DEFN = 31;
 STRUCT_DECL = 32;
 INTERFACE_DEFN = 33;
 INTERFACE_DECL = 34;
 ACCESS_REGION = 35;
    USING = 36;
 OPERATOR_FUNCTION = 37;
 OPERATOR_FUNCTION_DECL = 38;
 EVENT = 39;
 PROPERTY = 40;
 ANNOTATION_DEFN = 41;
 GLOBAL_TEMPLATE = 42;
     UNIT = 43;
     TART_ELEMENT_TOKEN = 44;
     NOP = 45;
     STRING = 46;
     CHAR = 47;
     LITERAL = 48;
     BOOLEAN = 49;
     NULL2 = 50;
     COMPLEX = 51;
     OPERATOR = 52;
     MODIFIER = 53;
     NAME = 54;
     ONAME = 55;
     CNAME = 56;
     TYPE = 57;
     TYPEPREV = 58;
  CONDITION = 59;
  BLOCK = 60;
     PSEUDO_BLOCK = 61;
     INDEX = 62;
  ENUM = 63;
     ENUM_DECLARATION = 64;
  IF_STATEMENT = 65;
     TERNARY = 66;
  THEN = 67;
  ELSE = 68;
  ELSEIF = 69;
     WHILE_STATEMENT = 70;
  DO_STATEMENT = 71;
  FOR_STATEMENT = 72;
  FOREACH_STATEMENT = 73;
     FOR_CONTROL = 74;
  FOR_INITIALIZATION = 75;
  FOR_CONDITION = 76;
  FOR_INCREMENT = 77;
     FOR_LIKE_CONTROL = 78;
  EXPRESSION_STATEMENT = 79;
  FUNCTION_CALL = 80;
  DECLARATION_STATEMENT = 81;
  DECLARATION = 82;
  DECLARATION_INITIALIZATION = 83;
  DECLARATION_RANGE = 84;
  RANGE = 85;
  GOTO_STATEMENT = 86;
  CONTINUE_STATEMENT = 87;
  BREAK_STATEMENT = 88;
  LABEL_STATEMENT = 89;
  LABEL = 90;
  SWITCH = 91;
  CASE = 92;
  DEFAULT = 93;
     FUNCTION_DEFINITION = 94;
  FUNCTION_DECLARATION = 95;
     LAMBDA = 96;
     FUNCTION_LAMBDA = 97;
  FUNCTION_SPECIFIER = 98;
  RETURN_STATEMENT = 99;
  PARAMETER_LIST = 100;
  PARAMETER = 101;
  KRPARAMETER_LIST = 102;
  KRPARAMETER = 103;
  ARGUMENT_LIST = 104;
  ARGUMENT = 105;
     PSEUDO_PARAMETER_LIST = 106;
     INDEXER_PARAMETER_LIST = 107;
  CLASS = 108;
  CLASS_DECLARATION = 109;
  STRUCT = 110;
  STRUCT_DECLARATION = 111;
  UNION = 112;
  UNION_DECLARATION = 113;
  DERIVATION_LIST = 114;
  PUBLIC_ACCESS = 115;
  PUBLIC_ACCESS_DEFAULT = 116;
  PRIVATE_ACCESS = 117;
  PRIVATE_ACCESS_DEFAULT = 118;
  PROTECTED_ACCESS = 119;
     PROTECTED_ACCESS_DEFAULT = 120;
     MEMBER_INIT_LIST = 121;
     MEMBER_INITIALIZATION_LIST = 122;
     MEMBER_INITIALIZATION = 123;
  CONSTRUCTOR_DEFINITION = 124;
  CONSTRUCTOR_DECLARATION = 125;
  DESTRUCTOR_DEFINITION = 126;
  DESTRUCTOR_DECLARATION = 127;
  FRIEND = 128;
  CLASS_SPECIFIER = 129;
  TRY_BLOCK = 130;
  CATCH_BLOCK = 131;
  FINALLY_BLOCK = 132;
  THROW_STATEMENT = 133;
  THROW_SPECIFIER = 134;
  THROW_SPECIFIER_JAVA = 135;
  TEMPLATE = 136;
     GENERIC_ARGUMENT = 137;
     GENERIC_ARGUMENT_LIST = 138;
     TEMPLATE_PARAMETER = 139;
     TEMPLATE_PARAMETER_LIST = 140;
     GENERIC_PARAMETER = 141;
     GENERIC_PARAMETER_LIST = 142;
  TYPEDEF = 143;
  ASM = 144;
  MACRO_CALL = 145;
  SIZEOF_CALL = 146;
     EXTERN = 147;
  NAMESPACE = 148;
  USING_DIRECTIVE = 149;
  DIRECTIVE = 150;
     ATOMIC = 151;
     STATIC_ASSERT_STATEMENT = 152;
     GENERIC_SELECTION = 153;
     GENERIC_SELECTOR = 154;
     GENERIC_ASSOCIATION_LIST = 155;
     GENERIC_ASSOCIATION = 156;
     ALIGNAS = 157;
     DECLTYPE = 158;
     CAPTURE = 159;
     LAMBDA_CAPTURE = 160;
     NOEXCEPT = 161;
     TYPENAME = 162;
     ALIGNOF = 163;
     TYPEID = 164;
     SIZEOF_PACK = 165;
     ENUM_CLASS = 166;
     ENUM_CLASS_DECLARATION = 167;
     REF_QUALIFIER = 168;
  SIGNAL_ACCESS = 169;
     FOREVER_STATEMENT = 170;
     EMIT_STATEMENT = 171;
  CPP_DIRECTIVE = 172;
     CPP_FILENAME = 173;
     FILE = 174;
     NUMBER = 175;
     CPP_NUMBER = 176;
     CPP_LITERAL = 177;
  CPP_MACRO_DEFN = 178;
  CPP_MACRO_VALUE = 179;
  ERROR = 180;
  CPP_ERROR = 181;
     CPP_WARNING = 182;
  CPP_PRAGMA = 183;
  CPP_INCLUDE = 184;
  CPP_DEFINE = 185;
  CPP_UNDEF = 186;
  CPP_LINE = 187;
  CPP_IF = 188;
  CPP_IFDEF = 189;
  CPP_IFNDEF = 190;
  CPP_THEN = 191;
  CPP_ELSE = 192;
  CPP_ELIF = 193;
     CPP_EMPTY = 194;
     CPP_REGION = 195;
     CPP_ENDREGION = 196;
     USING_STMT = 197;
     ESCAPE = 198;
     VALUE = 199;
     CPP_IMPORT = 200;
  CPP_ENDIF = 201;
     MARKER = 202;
     ERROR_PARSE = 203;
     ERROR_MODE = 204;
     IMPLEMENTS = 205;
     EXTENDS = 206;
     IMPORT = 207;
     PACKAGE = 208;
     ASSERT_STATEMENT = 209;
     INTERFACE = 210;
     INTERFACE_DECLARATION = 211;
     SYNCHRONIZED_STATEMENT = 212;
     ANNOTATION = 213;
     STATIC_BLOCK = 214;
     CHECKED_STATEMENT = 215;
     UNCHECKED_STATEMENT = 216;
     ATTRIBUTE = 217;
     TARGET = 218;
     UNSAFE_STATEMENT = 219;
     LOCK_STATEMENT = 220;
     FIXED_STATEMENT = 221;
     TYPEOF = 222;
     USING_STATEMENT = 223;
     FUNCTION_DELEGATE = 224;
     CONSTRAINT = 225;
     LINQ = 226;
     FROM = 227;
     WHERE = 228;
     SELECT = 229;
     LET = 230;
     ORDERBY = 231;
     JOIN = 232;
     GROUP = 233;
     IN = 234;
     ON = 235;
     EQUALS = 236;
     BY = 237;
     INTO = 238;
     EMPTY = 239;
     EMPTY_STMT = 240;
     RECEIVER = 241;
     MESSAGE = 242;
     SELECTOR = 243;
     PROTOCOL_LIST = 244;
     CATEGORY = 245;
     PROTOCOL = 246;
     REQUIRED_DEFAULT = 247;
     REQUIRED = 248;
     OPTIONAL = 249;
     ATTRIBUTE_LIST = 250;
     SYNTHESIZE = 251;
     DYNAMIC = 252;
     ENCODE = 253;
     AUTORELEASEPOOL = 254;
     COMPATIBILITY_ALIAS = 255;
     NIL = 256;
     CLASS_INTERFACE = 257;
     CLASS_IMPLEMENTATION = 258;
     PROTOCOL_DECLARATION = 259;
     CAST = 260;
     CONST_CAST = 261;
     DYNAMIC_CAST = 262;
     REINTERPRET_CAST = 263;
     STATIC_CAST = 264;
     POSITION = 265;
     CUDA_ARGUMENT_LIST = 266;
     OMP_DIRECTIVE = 267;
     OMP_NAME = 268;
     OMP_CLAUSE = 269;
     OMP_ARGUMENT_LIST = 270;
     OMP_ARGUMENT = 271;
     OMP_EXPRESSION = 272;
    END_ELEMENT_TOKEN = 273;
    MAIN = 274;
    BREAK = 275;
 CONTINUE = 276;
    WHILE = 277;
 DO = 278;
 FOR = 279;
    IF = 280;
 GOTO = 281;
    VISUAL_CXX_ASM = 282;
    SIZEOF = 283;
    AUTO = 284;
    REGISTER = 285;
    RESTRICT = 286;
    IMAGINARY = 287;
    NORETURN = 288;
    STATIC_ASSERT = 289;
    CRESTRICT = 290;
    CXX_TRY = 291;
    CXX_CATCH = 292;
    CXX_CLASS = 293;
    CONSTEXPR = 294;
    THREAD_LOCAL = 295;
    NULLPTR = 296;
    VOID = 297;
 RETURN = 298;
    INCLUDE = 299;
 DEFINE = 300;
 ELIF = 301;
    ENDIF = 302;
    ERRORPREC = 303;
    WARNING = 304;
 IFDEF = 305;
 IFNDEF = 306;
    LINE = 307;
 PRAGMA = 308;
 UNDEF = 309;
 INLINE = 310;
    MACRO_TYPE_NAME = 311;
    MACRO_CASE = 312;
    MACRO_LABEL = 313;
    SPECIFIER = 314;
 TRY = 315;
 CATCH = 316;
 THROW = 317;
    THROWS = 318;
 PUBLIC = 319;
 PRIVATE = 320;
 PROTECTED = 321;
    VIRTUAL = 322;
    EXPLICIT = 323;
    FOREVER = 324;
    SIGNAL = 325;
    EMIT = 326;
    NEW = 327;
    DELETE = 328;
    STATIC = 329;
    CONST = 330;
    MUTABLE = 331;
    VOLATILE = 332;
    TRANSIENT = 333;
    FINALLY = 334;
    FINAL = 335;
    ABSTRACT = 336;
    SUPER = 337;
    SYNCHRONIZED = 338;
    NATIVE = 339;
    STRICTFP = 340;
    NULLLITERAL = 341;
    ASSERT = 342;
    FOREACH = 343;
    REF = 344;
    OUT = 345;
    LOCK = 346;
    IS = 347;
    INTERNAL = 348;
    SEALED = 349;
    OVERRIDE = 350;
    IMPLICIT = 351;
    STACKALLOC = 352;
    AS = 353;
    DELEGATE = 354;
    FIXED = 355;
    CHECKED = 356;
    UNCHECKED = 357;
    REGION = 358;
    ENDREGION = 359;
    UNSAFE = 360;
    READONLY = 361;
    GET = 362;
    SET = 363;
    ADD = 364;
    REMOVE = 365;
    YIELD = 366;
    PARTIAL = 367;
    AWAIT = 368;
    ASYNC = 369;
    THIS = 370;
    PARAMS = 371;
    ALIAS = 372;
    ASCENDING = 373;
    DESCENDING = 374;
    ATINTERFACE = 375;
    ATIMPLEMENTATION = 376;
    ATEND = 377;
    ATPROTOCOL = 378;
    ATREQUIRED = 379;
    ATOPTIONAL = 380;
    ATCLASS = 381;
    WEAK = 382;
    STRONG = 383;
    OMP_OMP = 384;
    SPECIAL_CHARS = 385;
    SLICE_DEFINE = 386;
    SLICE_USE = 387;
}
message Element {
   oneof type {
      SrcmlKind srcml_kind = 1;
      SmaliKind smali_kind = 2;
      Python3Kind python3_kind = 3;
      SolidityKind solidity_kind = 4;
      Cobol85Kind cobol85_kind = 5;
   }
   bytes text = 6;
   int32 pos = 7;
   int32 length = 8;
   repeated Element child = 9;
   bytes tail = 10;
   oneof extra {
     Unit unit = 11;
     Literal literal = 12;
   }
   message Unit {
enum LanguageType {
DUMMY = 0;
ALL = 1;
OO = 2;
CXX = 3;
C = 4;
C_FAMILY = 5;
JAVA = 6;
CSHARP = 7;
OBJECTIVE_C = 8;
SMALI = 9;
SOLIDITY = 10;
COBOL85 = 11;
PYTHON3 = 12;
}
    string filename = 1;
    string revision = 2;
 LanguageType language = 3;
 int32 item = 4;
   }
   message Literal {
enum LiteralType {
dummy_type = 0;
number_type = 1;
char_type = 2;
string_type = 3;
boolean_type = 4;
null_type = 5;
}
    LiteralType type = 1;
   }
   int32 line = 13;
   int32 column = 14;
   float label = 15;
   enum DiffType {
     MATCHED = 0;
     ADDED = 1;
     DELETED = 2;
     CHANGED_FROM = 3;
     CHANGED_TO = 4;
   }
   DiffType change = 16;
   bool keep = 17;
   int32 id = 18;
}
message Delta {
   string src = 1;
   string dst = 2;
   repeated Diff diff = 3;
   message Diff {
 enum DeltaType {
     MATCH = 0;
     ADD = 1;
     DEL = 2;
     MOVE = 3;
     UPDATE = 4;
        }
 DeltaType type = 1;
    oneof delta {
  Match match = 2;
  Add add = 3;
  Del del = 4;
  Move move = 5;
  Update update = 6;
 }
 message Match {
  int32 src = 1;
  int32 dst = 2;
 }
 message Add {
  int32 src = 1;
  int32 dst = 2;
  int32 position = 3;
 }
 message Del {
  int32 src = 1;
 }
 message Move {
  int32 src = 1;
  int32 dst = 2;
  int32 position = 3;
 }
 message Update {
  int32 src = 1;
  int32 dst = 2;
 }
   }
}
message Pairs {
   message Pair {
 enum CloneType {
   MAYBE = 0;
   YES = 1;
   NO = 2;
 }
 Diff left = 1;
 Diff right = 2;
 CloneType type = 3;
 message Diff {
  string project = 1;
  int32 left_line = 2;
  int32 left_column = 3;
  int32 right_line = 4;
  int32 right_column = 5;
  Element old_code = 6;
  Element new_code = 7;
  string hash = 8;
  Slices slices = 9;
 }
   }
   repeated Pair pair = 1;
}
message Log {
 message Commit {
string id = 1;
bytes msg = 2;
bytes author_name = 3;
bytes author_email = 4;
int64 author_time = 5;
bytes committer_name = 6;
bytes committer_email = 7;
int64 committer_time = 8;
message Diff {
string a = 1;
string b = 2;
bool is_new = 3;
string is_code = 4;
string index_from = 5;
string index_to = 6;
string mode = 7;
message Hunk {
int32 from_lineno = 1;
int32 from_column = 2;
int32 to_lineno = 3;
int32 to_column = 4;
string context = 5;
message ModLine {
bytes line = 1;
bool is_add = 2;
bool is_del = 3;
}
repeated Element element = 6;
repeated Graph graph = 7;
repeated ModLine mod = 8;
Slices slice = 9;
}
repeated Hunk hunk = 8;
}
repeated Diff diff = 9;
Slices slice = 10;
 }
 message Author {
 int32 id = 1;
 bytes name = 2;
 string email = 3;
 }
 repeated Commit commit = 1;
 repeated Author author = 2;
}
message Slices {
    message Slice {
 enum ChangeType {
  UNCHANGED = 0;
  ADD = 1;
  DEL = 2;
 }
 message SourceFile {
  message Function {
   message Variable {
    message Position {
     string location = 1;
     ChangeType type = 2;
     string delta_location = 5;
    }
    message FunctionDecl {
     string name = 1;
     string location = 2;
    }
    string name = 1;
    Position pos = 2;
    ChangeType type = 3;
    repeated Position defn = 4;
    repeated Position use = 5;
    repeated string dvar = 6;
    repeated string alias = 7;
    repeated FunctionDecl cfunc = 8;
   }
   repeated Variable variable = 1;
   string name = 2;
   ChangeType type = 3;
  }
  repeated Function function = 1;
  string name = 2;
  ChangeType type = 3;
 }
 repeated SourceFile file = 1;
 string hash = 2;
      }
      repeated Slice slice = 1;
}
message Bugs {
      message Bug {
        message Info {
  bytes summary = 1;
  bytes description = 2;
 }
 bytes id = 1;
 bytes opendate = 2;
 bytes fixdate = 3;
 Info buginfo = 4;
 repeated bytes fixed_file = 5;
      }
      string repository = 1;
      repeated Bug bug = 2;
}
message Graph {
  message Edge {
 int32 node1 = 1;
 int32 node2 = 2;
  }
  message NodeLabel {
 int32 node = 1;
 string label = 2;
  }
  message NodeType {
 int32 node = 1;
 string type = 2;
  }
  message ContextEdges {
 repeated Edge nextToken = 1;
 repeated Edge child = 2;
 repeated Edge lastLexicalUse = 3;
 repeated Edge lastUse = 4;
 repeated Edge lastWrite = 5;
 repeated Edge returnsTo = 6;
 repeated Edge computesFrom = 7;
  }
  message ContextGraph {
   ContextEdges edges = 1;
   repeated NodeLabel nodeLabel = 2;
   repeated NodeType nodeType = 3;
  }
  message SymbolCandidate {
 int32 symbolDummyNode = 1;
 string symbolName = 2;
 bool isCorrect = 3;
  }
  message Unit {
 string filename = 1;
 int32 slotTokenIdx = 2;
 ContextGraph graph = 3;
 int32 SlotDummyNode = 4;
 repeated SymbolCandidate symbolCandidate = 5;
  }
  repeated Unit unit = 1;
}
message Data {
 oneof RecordType {
 Element element = 1;
 Log log = 2;
 Delta delta = 3;
 Pairs pairs = 4;
 Slices slices = 5;
 Bugs bugs = 6;
 Graph graph = 7;
 }
}
